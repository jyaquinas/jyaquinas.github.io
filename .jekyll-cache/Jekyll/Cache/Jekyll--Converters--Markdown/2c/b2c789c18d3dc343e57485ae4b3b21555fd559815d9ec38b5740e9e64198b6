I"ê'<h3 id="select">Select</h3>

<p>Letâ€™s say this is our table.</p>

<table>
  <thead>
    <tr>
      <th>CUSTOMERS</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>CUSTOMER_ID<br />FIRST_NAME<br />LAST_NAME<br />BIRTHDAY<br />ADDRESS<br />AGE</td>
    </tr>
  </tbody>
</table>

<p>The basic format is:</p>
<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">SELECT</span> <span class="n">exp</span> <span class="k">FROM</span> <span class="k">table_name</span> <span class="p">[</span><span class="k">WHERE</span> <span class="n">condition</span><span class="p">];</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">exp</code>: use * for selecting all columns, or list the specific columns you want<br />
<code class="language-plaintext highlighter-rouge">table_name</code>: at least one table required<sup id="fnref:1" role="doc-noteref"><a href="#fn:1" class="footnote" rel="footnote">1</a></sup><br />
<code class="language-plaintext highlighter-rouge">condition</code>: returns all rows if no condition is used</p>

<p>ex)</p>
<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">SELECT</span> <span class="o">*</span> <span class="k">FROM</span> <span class="n">customers</span><span class="p">;</span>
<span class="k">SELECT</span> <span class="n">first_name</span><span class="p">,</span> <span class="n">last_name</span> <span class="k">FROM</span> <span class="n">customers</span><span class="p">;</span>
<span class="k">SELECT</span> <span class="n">first_name</span><span class="p">,</span> <span class="n">last_name</span> <span class="k">FROM</span> <span class="n">customers</span> <span class="k">WHERE</span> <span class="n">age</span> <span class="o">&gt;</span> <span class="mi">20</span><span class="p">;</span>
</code></pre></div></div>

<p>If you want to return only distinct values, you can use <code class="language-plaintext highlighter-rouge">SELECT DISTINCT</code> instead.</p>

<h3 id="where">Where</h3>
<p>The <code class="language-plaintext highlighter-rouge">WHERE</code> clause is used to filter the records and extract only the ones that meet a certain condition. This can be used for all <code class="language-plaintext highlighter-rouge">SELECT</code>, <code class="language-plaintext highlighter-rouge">INSERT</code>, <code class="language-plaintext highlighter-rouge">UPDATE</code>, and <code class="language-plaintext highlighter-rouge">DELETE</code> statements.</p>

<p>Strings must be enclosed in single quotes, while numbers do not.</p>
<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">SELECT</span> <span class="o">*</span> <span class="k">FROM</span> <span class="n">customers</span> <span class="k">WHERE</span> <span class="n">first_name</span> <span class="o">=</span> <span class="s1">'Jack'</span><span class="p">;</span>
<span class="k">SELECT</span> <span class="o">*</span> <span class="k">FROM</span> <span class="n">customers</span> <span class="k">WHERE</span> <span class="n">age</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</code></pre></div></div>

<p>You can also use multiple conditions using <code class="language-plaintext highlighter-rouge">AND</code> and <code class="language-plaintext highlighter-rouge">OR</code>.</p>
<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">SELECT</span> <span class="o">*</span> <span class="k">FROM</span> <span class="n">customers</span> <span class="k">WHERE</span> <span class="n">first_name</span> <span class="o">=</span> <span class="s1">'John'</span> <span class="k">AND</span> <span class="n">age</span> <span class="o">&gt;</span> <span class="mi">20</span><span class="p">;</span>
<span class="k">SELECT</span> <span class="o">*</span> <span class="k">FROM</span> <span class="n">customers</span> <span class="k">WHERE</span> <span class="n">first_name</span> <span class="o">=</span> <span class="s1">'John'</span> <span class="k">AND</span> <span class="p">(</span><span class="n">age</span> <span class="o">&lt;</span> <span class="mi">10</span> <span class="k">OR</span> <span class="n">age</span> <span class="o">&gt;</span> <span class="mi">30</span><span class="p">);</span>
</code></pre></div></div>

<p>These are the comparison operators that can be used with <code class="language-plaintext highlighter-rouge">WHERE</code>:</p>

<table>
  <thead>
    <tr>
      <th>Operator</th>
      <th>Description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>=</td>
      <td>Equal</td>
    </tr>
    <tr>
      <td>&lt;&gt; or !=</td>
      <td>Not equal</td>
    </tr>
    <tr>
      <td>&gt;</td>
      <td>Greater than</td>
    </tr>
    <tr>
      <td>&gt;=</td>
      <td>Greater than or equal to</td>
    </tr>
    <tr>
      <td>&lt;</td>
      <td>Less than</td>
    </tr>
    <tr>
      <td>&lt;=</td>
      <td>Less than or equal to</td>
    </tr>
    <tr>
      <td>NOT</td>
      <td>negate a condition</td>
    </tr>
    <tr>
      <td>BETWEEN</td>
      <td>Between a range (inclusive)<sup id="fnref:2" role="doc-noteref"><a href="#fn:2" class="footnote" rel="footnote">2</a></sup></td>
    </tr>
    <tr>
      <td>IS NULL</td>
      <td>is NULL value</td>
    </tr>
    <tr>
      <td>NOT NULL</td>
      <td>is  non-NULL value</td>
    </tr>
    <tr>
      <td>IN()</td>
      <td>Matches a value inside the IN, mostly used to avoid using multiple OR conditions</td>
    </tr>
    <tr>
      <td>LIKE</td>
      <td>Pattern matching</td>
    </tr>
    <tr>
      <td>EXISTS()</td>
      <td>True if subquery returns at least one row</td>
    </tr>
  </tbody>
</table>

<h3 id="in">IN</h3>
<p>Mostly used to avoid using multiple <code class="language-plaintext highlighter-rouge">OR</code> conditions.</p>

<p><code class="language-plaintext highlighter-rouge">SELECT * FROM customers WHERE first_name = 'Jack' OR name = 'John' OR name = 'Jane';</code> is equivalent to <br />
<code class="language-plaintext highlighter-rouge">SELECT * FROM customers WHERE first_name IN ('Jack', 'John', 'Jane);</code></p>

<h3 id="like">LIKE</h3>
<p>This operator is used in a <code class="language-plaintext highlighter-rouge">WHERE</code> clause for pattern matching using the following wildcards:</p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">'%'</code>: represents any character of any length, including the length of zero</li>
  <li><code class="language-plaintext highlighter-rouge">'_'</code>: represents a single character</li>
</ul>

<p>Here are a few examples:</p>

<table>
  <thead>
    <tr>
      <th>Expression</th>
      <th>Example matches</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">'a%'</code></td>
      <td>apple, at, a, are</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">'%s'</code></td>
      <td>cars, mats, bats, s</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">'c_t'</code></td>
      <td>cat, cot, cut</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">'_r%'</code></td>
      <td>arp, art, articulate, bracket</td>
    </tr>
  </tbody>
</table>

<p><em>Note: This also works with numbers. <code class="language-plaintext highlighter-rouge">WHERE num LIKE '32_'</code> will find 320, 321, 322, 323â€¦</em></p>

<h3 id="exists">EXISTS</h3>
<p>As mentioned above, this operator is used with a subquery, where the condition is if the subquery returns at least one row. A subquery is a select statement that is nested inside another query.</p>

<p>Say we have another table USERNAME.
| ACCOUNTS |
| â€” |
| CUSTOMER_ID<br />USERNAME<br />PASSWORD |</p>

<p>We can then query something like this:</p>
<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">SELECT</span> <span class="n">username</span> <span class="k">FROM</span> <span class="n">accounts</span> <span class="k">WHERE</span> <span class="k">EXISTS</span> <span class="p">(</span><span class="k">SELECT</span> <span class="o">*</span> <span class="k">FROM</span> <span class="n">customers</span> <span class="k">WHERE</span> <span class="n">customers</span><span class="p">.</span><span class="n">customer_id</span> <span class="o">=</span> <span class="n">accounts</span><span class="p">.</span><span class="n">customer_id</span><span class="p">);</span>
</code></pre></div></div>
<p>And it will return all the usernames where it has matching customer_id in both tables.</p>

<p><em>Note:</em> The query above can be similarly achieved with an inner join, such as <code class="language-plaintext highlighter-rouge">SELECT username FROM  customers c INNER JOIN accounts a ON c.customer_id = a.customer_id</code>. The difference is that the one using <code class="language-plaintext highlighter-rouge">EXISTS</code> simply returns results from the CUSTOMERS table when the condition matches, and the inner join combines two tables first and returns results from the combined table. Having duplicates can lead to having repeated rows if the inner join is used.</p>

<h3 id="subqueries">Subqueries</h3>

<h3 id="order-by">ORDER BY</h3>

<h3 id="group-by">GROUP BY</h3>

<h3 id="join">JOIN</h3>

<hr />
<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:1" role="doc-endnote">
      <p>If multiple tables are used without any join operations, it will simply do a cross join (or a <a href="https://en.wikipedia.org/wiki/Cartesian_product">cartesian product</a>) to create all possible combinations.Â <a href="#fnref:1" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:2" role="doc-endnote">
      <p><code class="language-plaintext highlighter-rouge">WHERE age BETWEEN 20 and 30</code> is equal to <code class="language-plaintext highlighter-rouge">WHERE age &gt;= 20 AND age &lt;= 30</code>Â <a href="#fnref:2" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>
:ET