I"y<p>I think I first came across the concept of a trie (pronouced <em>try</em>) when I was reading the book <em>Cracking the Coding Interiew</em>. But I never really gave it much thought. Plus, I never came across a problem on <a href="https://www.leetcode.com">Leet Code</a> where I had to use one. But I recently came across a problem where using a trie was the only way to efficiently solve the problem.</p>

<p>Let’s briefly go over the basics.</p>

<p>A trie is basically a special type of tree that can compactly store strings. This is especially true if the words are very similar, i.e. have overlapping parts, like prefixes. The children consist of all the possible characters of a word. So if we limit it to lowercase alphabets, a-z, it will have 26 children.</p>

<p>Each node also contains a boolean flag, <code class="language-plaintext highlighter-rouge">isEndOfWord</code>, that can be used to indicate the end of a word. Now this can vary depending on the implementation. If you’d like to associate a value for each word, you’d simply replace the bool variable with something like an int to store the value.</p>

<p><strong>Pros</strong></p>
<ul>
  <li>space efficient if storing similar words</li>
  <li>efficient for looking up prefixes</li>
  <li>relatively fast insert and lookup</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">func</span><span class="p">():</span>
  <span class="n">a</span> <span class="o">=</span> <span class="mi">0</span>
  <span class="n">b</span> <span class="o">=</span> <span class="mi">1</span>
  <span class="n">c</span> <span class="o">=</span> <span class="mi">2</span>
  <span class="n">d</span> <span class="o">=</span> <span class="mi">4</span>
  <span class="n">e</span> <span class="o">=</span> <span class="mi">5</span>

</code></pre></div></div>
:ET