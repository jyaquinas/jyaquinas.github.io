<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.1">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2022-02-15T22:48:18+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Jyaquinas</title><subtitle>Personal Blog Space</subtitle><author><name>jyaquinas</name></author><entry><title type="html">Linux File Permissions</title><link href="http://localhost:4000/linux/2022/02/13/linux-file-permissions.html" rel="alternate" type="text/html" title="Linux File Permissions" /><published>2022-02-13T09:44:00+09:00</published><updated>2022-02-13T09:44:00+09:00</updated><id>http://localhost:4000/linux/2022/02/13/linux-file-permissions</id><content type="html" xml:base="http://localhost:4000/linux/2022/02/13/linux-file-permissions.html"><![CDATA[<p>When you see the contents of a directory in long format (<code class="language-plaintext highlighter-rouge">ls -l</code>), you’ll be able to see their permissions.</p>

<p>The first column will look something like this: <code class="language-plaintext highlighter-rouge">drwxr-xr-x</code></p>

<p>The first character represents the file type, such as <code class="language-plaintext highlighter-rouge">-</code> for regular files and <code class="language-plaintext highlighter-rouge">d</code> for directories. Then it’s followed by 3 sets of 3 characters, each character representing read, write, and execute permissions, in the respective order. A <code class="language-plaintext highlighter-rouge">-</code> means it has no permission for that action.</p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">rwx</code>: has full read, write, and execute permissions</li>
  <li><code class="language-plaintext highlighter-rouge">rw-</code>: can only read and write</li>
  <li><code class="language-plaintext highlighter-rouge">---</code>: has no permissions at all</li>
</ul>]]></content><author><name>jyaquinas</name></author><category term="Linux" /><category term="linux" /><summary type="html"><![CDATA[When you see the contents of a directory in long format (ls -l), you’ll be able to see their permissions.]]></summary></entry><entry><title type="html">Basic Linux Commands</title><link href="http://localhost:4000/linux/2022/02/13/basic-linux-commands.html" rel="alternate" type="text/html" title="Basic Linux Commands" /><published>2022-02-13T09:44:00+09:00</published><updated>2022-02-13T09:44:00+09:00</updated><id>http://localhost:4000/linux/2022/02/13/basic-linux-commands</id><content type="html" xml:base="http://localhost:4000/linux/2022/02/13/basic-linux-commands.html"><![CDATA[<h3 id="pwd">pwd</h3>
<p>This will print out the current working directory that you’re in. It will usually be something like <code class="language-plaintext highlighter-rouge">/home/user</code>.</p>

<h3 id="cd">cd</h3>
<p>This is the command used for navigating through the directories. You can either input the absolute path or relative to your current directory.</p>

<p>Let’s say our current directory is <code class="language-plaintext highlighter-rouge">/home/user</code>, and we have a folder named “a” in there.</p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">cd a</code> or <code class="language-plaintext highlighter-rouge">cd /home/user/a</code> will take us to <code class="language-plaintext highlighter-rouge">/home/user/a</code></li>
  <li><code class="language-plaintext highlighter-rouge">cd ..</code> will move one directory up</li>
  <li><code class="language-plaintext highlighter-rouge">cd -</code> will move to the previous directory</li>
</ul>

<h3 id="ls">ls</h3>
<p>Use this to print out the contents in your current directory<sup id="fnref:1" role="doc-noteref"><a href="#fn:1" class="footnote" rel="footnote">1</a></sup>. So if we have the following files in our home directory: a.txt, b.txt, c.txt</p>

<p><code class="language-plaintext highlighter-rouge">ls</code> will print out <code class="language-plaintext highlighter-rouge">a.txt b.txt c.txt</code>.<br />
This command has a couple of command options. Here are a few important ones.</p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">ls -a</code>: list all files including hidden ones</li>
  <li><code class="language-plaintext highlighter-rouge">ls -l'</code> list all files in long format (includes information like date created and permissions)</li>
  <li><code class="language-plaintext highlighter-rouge">ls -R</code>: recursively lists all files in directory and subdirectory</li>
</ul>

<p>You can also combine the commands, such as <code class="language-plaintext highlighter-rouge">ls -la</code>, which will list all files including the hidden ones in long format.</p>

<h3 id="mkdir--rmdir">mkdir &amp; rmdir</h3>
<p>This is used to create and delete folders. Just append the folder name at the end, like <code class="language-plaintext highlighter-rouge">mkdir foldername</code>.</p>

<p><em>Note: <code class="language-plaintext highlighter-rouge">rmdir</code> only lets you remove empty directories. To remove all of the subdirectories that it contains, use <code class="language-plaintext highlighter-rouge">rm -r foldername</code>.</em></p>

<h3 id="mv">mv</h3>
<p>This is mostly used for moving files around, but it can also be used for renaming files.<br />
To move a file, simply write the file name, followed by the destination path. <code class="language-plaintext highlighter-rouge">mv filename.txt /home/user/a</code>.<sup id="fnref:2" role="doc-noteref"><a href="#fn:2" class="footnote" rel="footnote">2</a></sup><br />
To rename a file, write the old file name, followed by the new file name. <code class="language-plaintext highlighter-rouge">mv oldfilename.txt newfilename.txt</code></p>

<h3 id="cp">cp</h3>
<p>Use this command to copy files to a target destination.<br />
<code class="language-plaintext highlighter-rouge">cp filename.txt /home/user/a</code></p>

<h3 id="rm">rm</h3>
<p>Use this to remove files and directories. As mentioned before, to delete a directory and all of contents or subdirectories that it contains, use <code class="language-plaintext highlighter-rouge">rm -r</code>.</p>

<h3 id="touch">touch</h3>
<p>This command is used to create a new file. This can be anything from a simple txt file to an html file.<br />
<code class="language-plaintext highlighter-rouge">touch filename.txt</code></p>

<h3 id="echo">echo</h3>
<p>This is used to move some data into some file, usually some text.</p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">echo 'text' &gt; filename.txt</code>: Use a single greater-than sign to overwrite the file. So this will replace the old data with the new data.</li>
  <li><code class="language-plaintext highlighter-rouge">echo 'text' &gt;&gt; filename.txt</code>: Use two greater-than signs to add data to the file. New data will be added to a new line.</li>
</ul>

<p><em>Note: If you use a filename that doesn’t exist, a new file with the content inside will be created.</em></p>

<h3 id="vi--nano">vi | nano</h3>
<p>These are text editors in linux. But since nano is newer and easier to use, let’s focus on nano.</p>

<p>Typing <code class="language-plaintext highlighter-rouge">nano filename.txt</code> will take you to editor mode. Make the necessary changes, and then save by pressing <strong>Ctrl+O</strong>, exit by pressing <strong>Ctrl+X</strong>.<br />
You can see the other options you can use on the bottom of the terminal window.</p>

<h3 id="cat">cat</h3>
<p>If you want to know what kind of content is inside a file, use <code class="language-plaintext highlighter-rouge">cat</code> to print out the content. Simply type <code class="language-plaintext highlighter-rouge">cat filename.txt</code>.</p>

<p>You can create a new file by using <code class="language-plaintext highlighter-rouge">cat &gt; newfilename.txt</code>. You can then type the content you want into the file, then exit by pressing <strong>Ctrl+Z</strong>.</p>

<h3 id="grep">grep</h3>
<p>Use this command to find certain words or phrases within a text.</p>

<p>For instance, if we want to find if the word “hello” exists somewhere in the file, we can use <code class="language-plaintext highlighter-rouge">grep hello filename.txt</code>.<br />
This will then display all the lines that contain the word.</p>

<p>For phrases, place them inside quotes, like <code class="language-plaintext highlighter-rouge">grep 'target phrase' filename.txt</code>.</p>

<h3 id="sudo">sudo</h3>
<p><code class="language-plaintext highlighter-rouge">sudo</code> stands for “SuperUser Do”. Use this to run commands with administrative or root privileges.</p>

<h3 id="chmod">chmod</h3>
<p>This is used for changing the read, write, and execute permissions of files and directories.
I’ll provide more info about this in a separate post.</p>

<hr />
<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:1" role="doc-endnote">
      <p>You can list the contents of another directory if you append the directory’s path at the end. <code class="language-plaintext highlighter-rouge">ls /home/user/a</code> <a href="#fnref:1" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:2" role="doc-endnote">
      <p>Note that you can also move folders around. Use the folder name instead of the file name. <a href="#fnref:2" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>]]></content><author><name>jyaquinas</name></author><category term="Linux" /><category term="linux" /><summary type="html"><![CDATA[pwd This will print out the current working directory that you’re in. It will usually be something like /home/user.]]></summary></entry><entry><title type="html">SQL Crash Course</title><link href="http://localhost:4000/database/2022/02/09/sql_crash_course.html" rel="alternate" type="text/html" title="SQL Crash Course" /><published>2022-02-09T22:03:00+09:00</published><updated>2022-02-09T22:03:00+09:00</updated><id>http://localhost:4000/database/2022/02/09/sql_crash_course</id><content type="html" xml:base="http://localhost:4000/database/2022/02/09/sql_crash_course.html"><![CDATA[<h3 id="select">SELECT</h3>

<p>Let’s say this is our table.</p>

<table>
  <thead>
    <tr>
      <th>CUSTOMERS</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>CUSTOMER_ID<br />FIRST_NAME<br />LAST_NAME<br />BIRTHDAY<br />ADDRESS<br />AGE</td>
    </tr>
  </tbody>
</table>

<p>The basic format is:</p>
<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">SELECT</span> <span class="n">exp</span> <span class="k">FROM</span> <span class="k">table_name</span> <span class="p">[</span><span class="k">WHERE</span> <span class="n">condition</span><span class="p">];</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">exp</code>: use * for selecting all columns, or list the specific columns you want<br />
<code class="language-plaintext highlighter-rouge">table_name</code>: at least one table required<sup id="fnref:1" role="doc-noteref"><a href="#fn:1" class="footnote" rel="footnote">1</a></sup><br />
<code class="language-plaintext highlighter-rouge">condition</code>: returns all rows if no condition is used</p>

<p>ex)</p>
<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">SELECT</span> <span class="o">*</span> <span class="k">FROM</span> <span class="n">customers</span><span class="p">;</span>
<span class="k">SELECT</span> <span class="n">first_name</span><span class="p">,</span> <span class="n">last_name</span> <span class="k">FROM</span> <span class="n">customers</span><span class="p">;</span>
<span class="k">SELECT</span> <span class="n">first_name</span><span class="p">,</span> <span class="n">last_name</span> <span class="k">FROM</span> <span class="n">customers</span>
  <span class="k">WHERE</span> <span class="n">age</span> <span class="o">&gt;</span> <span class="mi">20</span><span class="p">;</span>
</code></pre></div></div>

<p>If you want to return only distinct values, you can use <code class="language-plaintext highlighter-rouge">SELECT DISTINCT</code> instead.</p>

<h3 id="where">WHERE</h3>
<p>The <code class="language-plaintext highlighter-rouge">WHERE</code> clause is used to filter the records and extract only the ones that meet a certain condition. This can be used for all <code class="language-plaintext highlighter-rouge">SELECT</code>, <code class="language-plaintext highlighter-rouge">INSERT</code>, <code class="language-plaintext highlighter-rouge">UPDATE</code>, and <code class="language-plaintext highlighter-rouge">DELETE</code> statements.</p>

<p>Strings must be enclosed in single quotes, while numbers do not.</p>
<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">SELECT</span> <span class="o">*</span> <span class="k">FROM</span> <span class="n">customers</span> <span class="k">WHERE</span> <span class="n">first_name</span> <span class="o">=</span> <span class="s1">'Jack'</span><span class="p">;</span>
<span class="k">SELECT</span> <span class="o">*</span> <span class="k">FROM</span> <span class="n">customers</span> <span class="k">WHERE</span> <span class="n">age</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</code></pre></div></div>

<p>You can also use multiple conditions using <code class="language-plaintext highlighter-rouge">AND</code> and <code class="language-plaintext highlighter-rouge">OR</code>.</p>
<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">SELECT</span> <span class="o">*</span> <span class="k">FROM</span> <span class="n">customers</span>
  <span class="k">WHERE</span> <span class="n">first_name</span> <span class="o">=</span> <span class="s1">'John'</span> <span class="k">AND</span> <span class="n">age</span> <span class="o">&gt;</span> <span class="mi">20</span><span class="p">;</span>
<span class="k">SELECT</span> <span class="o">*</span> <span class="k">FROM</span> <span class="n">customers</span>
  <span class="k">WHERE</span> <span class="n">first_name</span> <span class="o">=</span> <span class="s1">'John'</span> <span class="k">AND</span> <span class="p">(</span><span class="n">age</span> <span class="o">&lt;</span> <span class="mi">10</span> <span class="k">OR</span> <span class="n">age</span> <span class="o">&gt;</span> <span class="mi">30</span><span class="p">);</span>
</code></pre></div></div>

<p>These are the comparison operators that can be used with <code class="language-plaintext highlighter-rouge">WHERE</code>:</p>

<table>
  <thead>
    <tr>
      <th>Operator</th>
      <th>Description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>=</td>
      <td>Equal</td>
    </tr>
    <tr>
      <td>&lt;&gt; or !=</td>
      <td>Not equal</td>
    </tr>
    <tr>
      <td>&gt;</td>
      <td>Greater than</td>
    </tr>
    <tr>
      <td>&gt;=</td>
      <td>Greater than or equal to</td>
    </tr>
    <tr>
      <td>&lt;</td>
      <td>Less than</td>
    </tr>
    <tr>
      <td>&lt;=</td>
      <td>Less than or equal to</td>
    </tr>
    <tr>
      <td>NOT</td>
      <td>negate a condition</td>
    </tr>
    <tr>
      <td>BETWEEN</td>
      <td>Between a range (inclusive)<sup id="fnref:2" role="doc-noteref"><a href="#fn:2" class="footnote" rel="footnote">2</a></sup></td>
    </tr>
    <tr>
      <td>IS NULL</td>
      <td>is NULL value</td>
    </tr>
    <tr>
      <td>NOT NULL</td>
      <td>is  non-NULL value</td>
    </tr>
    <tr>
      <td>IN()</td>
      <td>Matches a value inside the IN, mostly used to avoid using multiple OR conditions</td>
    </tr>
    <tr>
      <td>LIKE</td>
      <td>Pattern matching</td>
    </tr>
    <tr>
      <td>EXISTS()</td>
      <td>True if subquery returns at least one row</td>
    </tr>
  </tbody>
</table>

<p><br /></p>
<h3 id="in">IN</h3>
<p>Mostly used to avoid using multiple <code class="language-plaintext highlighter-rouge">OR</code> conditions.</p>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">SELECT</span> <span class="o">*</span> <span class="k">FROM</span> <span class="n">customers</span>
  <span class="k">WHERE</span> <span class="n">first_name</span> <span class="o">=</span> <span class="s1">'Jack'</span>
    <span class="k">OR</span> <span class="n">name</span> <span class="o">=</span> <span class="s1">'John'</span>
    <span class="k">OR</span> <span class="n">name</span> <span class="o">=</span> <span class="s1">'Jane'</span><span class="p">;</span>
</code></pre></div></div>

<p>is equivalent to</p>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">SELECT</span> <span class="o">*</span> <span class="k">FROM</span> <span class="n">customers</span>
  <span class="k">WHERE</span> <span class="n">first_name</span> <span class="k">IN</span> <span class="p">(</span><span class="s1">'Jack'</span><span class="p">,</span> <span class="s1">'John'</span><span class="p">,</span> <span class="s1">'Jane'</span><span class="p">);</span>
</code></pre></div></div>

<h3 id="like">LIKE</h3>
<p>This operator is used in a <code class="language-plaintext highlighter-rouge">WHERE</code> clause for pattern matching using the following wildcards:</p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">'%'</code>: represents any character of any length, including the length of zero</li>
  <li><code class="language-plaintext highlighter-rouge">'_'</code>: represents a single character</li>
</ul>

<p>Here are a few examples:</p>

<table>
  <thead>
    <tr>
      <th>Expression</th>
      <th>Example matches</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">'a%'</code></td>
      <td>apple, at, a, are</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">'%s'</code></td>
      <td>cars, mats, bats, s</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">'c_t'</code></td>
      <td>cat, cot, cut</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">'_r%'</code></td>
      <td>arp, art, articulate, bracket</td>
    </tr>
  </tbody>
</table>

<p><em>Note: This also works with numbers. <code class="language-plaintext highlighter-rouge">WHERE num LIKE '32_'</code> will find 320, 321, 322, 323…</em></p>

<h3 id="exists">EXISTS</h3>
<p>As mentioned above, this operator is used with a subquery, where the condition is if the subquery returns at least one row. A subquery is a select statement that is nested inside another query (more info below).</p>

<p>Say we have another table called ACCOUNTS.</p>

<table>
  <thead>
    <tr>
      <th>ACCOUNTS</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>CUSTOMER_ID<br />USERNAME<br />PASSWORD</td>
    </tr>
  </tbody>
</table>

<p>We can then query something like this:</p>
<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">SELECT</span> <span class="n">username</span> <span class="k">FROM</span> <span class="n">accounts</span>
  <span class="k">WHERE</span> <span class="k">EXISTS</span> <span class="p">(</span><span class="k">SELECT</span> <span class="o">*</span> <span class="k">FROM</span> <span class="n">customers</span>
                <span class="k">WHERE</span> <span class="n">customers</span><span class="p">.</span><span class="n">customer_id</span> <span class="o">=</span> <span class="n">accounts</span><span class="p">.</span><span class="n">customer_id</span><span class="p">);</span>
</code></pre></div></div>
<p>And it will return all the usernames where it has matching customer_id in both tables.</p>

<p><em>Note:</em> The query above can be similarly achieved with an inner join, such as:</p>
<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">SELECT</span> <span class="n">username</span> <span class="k">FROM</span> <span class="n">customers</span> <span class="k">c</span>
  <span class="k">INNER</span> <span class="k">JOIN</span> <span class="n">accounts</span> <span class="n">a</span> <span class="k">ON</span> <span class="k">c</span><span class="p">.</span><span class="n">customer_id</span> <span class="o">=</span> <span class="n">a</span><span class="p">.</span><span class="n">customer_id</span><span class="p">;</span>
</code></pre></div></div>

<p>The difference is that the one using <code class="language-plaintext highlighter-rouge">EXISTS</code> simply returns results from the CUSTOMERS table when the condition matches, and the <code class="language-plaintext highlighter-rouge">INNER JOIN</code> combines two tables first and returns results from the combined table. Having duplicates can lead to having repeated rows if the inner join is used.</p>

<h3 id="subqueries">Subqueries</h3>
<p>Subqueries can be used inside <code class="language-plaintext highlighter-rouge">SELECT</code>, <code class="language-plaintext highlighter-rouge">WHERE</code>, and <code class="language-plaintext highlighter-rouge">FROM</code> clauses.</p>

<p>It executes the inner subquery first and uses that result to perform the outer queries.</p>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">SELECT</span> <span class="n">username</span> <span class="k">FROM</span> <span class="n">accounts</span> <span class="n">a</span>
  <span class="k">WHERE</span> <span class="n">a</span><span class="p">.</span><span class="n">customer_id</span> <span class="k">IN</span>
    <span class="p">(</span><span class="k">SELECT</span> <span class="k">c</span><span class="p">.</span><span class="n">customer_id</span> <span class="k">FROM</span> <span class="n">customers</span> <span class="k">c</span>
      <span class="k">WHERE</span> <span class="k">c</span><span class="p">.</span><span class="n">age</span> <span class="o">&gt;</span> <span class="mi">20</span><span class="p">);</span>
</code></pre></div></div>
<p>It first executes the subquery to obtain the results. Let’s say the customer id for those above the age of 20 turned out to be 1, 5, 7, and 30. Now the outer query will try to find records that have a match with these customer ids.</p>

<p>Note that there can be multiple nested subqueries. But there is a limit of 255 levels of subqueries for the <code class="language-plaintext highlighter-rouge">WHERE</code> clause, and no limit for the <code class="language-plaintext highlighter-rouge">FROM</code> clause. (This is for Oracle SQL)</p>

<h3 id="order-by">ORDER BY</h3>
<p>This is used to sort the results, and it can only be used with <code class="language-plaintext highlighter-rouge">SELECT</code> queries.</p>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">SELECT</span> <span class="o">*</span> <span class="k">FROM</span> <span class="n">customers</span> <span class="k">ORDER</span> <span class="k">BY</span> <span class="n">customer_id</span><span class="p">;</span>
</code></pre></div></div>

<p>It will order the results in ascending order by default even if you don’t use the <code class="language-plaintext highlighter-rouge">ASC</code> keyword. For descending order, use the keyword <code class="language-plaintext highlighter-rouge">DESC</code>.</p>

<p>You can also use multiple columns.</p>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">SELECT</span> <span class="o">*</span> <span class="k">FROM</span> <span class="n">customers</span> <span class="k">ORDER</span> <span class="k">BY</span> <span class="n">age</span><span class="p">,</span> <span class="n">customer_id</span> <span class="k">DESC</span><span class="p">;</span>
<span class="k">SELECT</span> <span class="o">*</span> <span class="k">FROM</span> <span class="n">customers</span> <span class="k">ORDER</span> <span class="k">BY</span> <span class="n">age</span> <span class="k">ASC</span><span class="p">,</span>
  <span class="n">customer_id</span> <span class="k">DESC</span><span class="p">;</span> <span class="cm">/* This is also possible */</span>
</code></pre></div></div>

<p>This will simply use the following columns as the next sorting condition. So for the query above, if two rows have the same age, it will then sort by customer_id.</p>

<h3 id="group-by">GROUP BY</h3>
<p>This clause is used for grouping results based on matching values in specified columns, and usually in conjunction with an aggregate function (e.g. SUM, COUNT, MIN, MAX, AVG).</p>

<p>The syntax is as follows:</p>
<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">SELECT</span> <span class="n">exp1</span><span class="p">,</span> <span class="n">exp2</span><span class="p">,</span> <span class="p">...</span>
    <span class="n">agg_func1</span><span class="p">(</span><span class="n">agg_exp1</span><span class="p">),</span> <span class="n">agg_func2</span><span class="p">(</span><span class="n">agg_exp2</span><span class="p">),</span> <span class="p">...</span>
    <span class="p">[</span><span class="k">WHERE</span> <span class="n">conditions</span><span class="p">]</span>
    <span class="k">GROUP</span> <span class="k">BY</span> <span class="n">exp1</span><span class="p">,</span> <span class="n">exp2</span><span class="p">,</span> <span class="p">...;</span>
</code></pre></div></div>
<p><code class="language-plaintext highlighter-rouge">exp1, exp2, ...</code>: must be included in the <code class="language-plaintext highlighter-rouge">GROUP BY</code> clause, and excluded from the aggregate functions</p>

<p>The reason why you don’t want the same columns in the <code class="language-plaintext highlighter-rouge">GROUP BY</code> as in the aggregate functions is because it wouldn’t make sense to perform some aggregate function on the rows in which all the values are the same. If you’re grouping by “age”, for example, and you try to get the max age value from a group of people with the same age, you’d just get the same value.</p>

<p>I guess the only aggregate function that would make sense would be <code class="language-plaintext highlighter-rouge">COUNT</code>, as that will return the count number for each group value.</p>

<p>Here’s an example.</p>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">SELECT</span> <span class="n">age</span><span class="p">,</span> <span class="k">COUNT</span><span class="p">(</span><span class="n">customer_id</span><span class="p">)</span> <span class="k">GROUP</span> <span class="k">BY</span> <span class="n">age</span><span class="p">;</span>
<span class="k">SELECT</span> <span class="n">age</span><span class="p">,</span> <span class="k">COUNT</span><span class="p">(</span><span class="n">age</span><span class="p">)</span>
  <span class="k">GROUP</span> <span class="k">BY</span> <span class="n">age</span><span class="p">;</span> <span class="cm">/* this also works */</span>
<span class="k">SELECT</span> <span class="n">age</span><span class="p">,</span> <span class="n">customer_id</span>
  <span class="k">GROUP</span> <span class="k">BY</span> <span class="n">age</span><span class="p">;</span> <span class="cm">/* this returns an error */</span>
</code></pre></div></div>

<p>You can also group by multiple columns. So if we group by both age and gender, it will return all the existing combinations of the two columns.
So for the example below:</p>

<table>
  <thead>
    <tr>
      <th>customer_id</th>
      <th>age</th>
      <th>gender</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>1</td>
      <td>20</td>
      <td>M</td>
    </tr>
    <tr>
      <td>2</td>
      <td>20</td>
      <td>F</td>
    </tr>
    <tr>
      <td>3</td>
      <td>25</td>
      <td>M</td>
    </tr>
    <tr>
      <td>4</td>
      <td>25</td>
      <td>M</td>
    </tr>
  </tbody>
</table>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">SELECT</span> <span class="n">age</span><span class="p">,</span> <span class="n">gender</span><span class="p">,</span> <span class="k">COUNT</span><span class="p">(</span><span class="n">customer_id</span><span class="p">)</span> <span class="k">as</span> <span class="k">count</span>
  <span class="k">GROUP</span> <span class="k">BY</span> <span class="n">age</span><span class="p">,</span> <span class="n">gender</span><span class="p">;</span>
</code></pre></div></div>

<p>The result will be:</p>

<table>
  <thead>
    <tr>
      <th>age</th>
      <th>gender</th>
      <th>count</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>20</td>
      <td>M</td>
      <td>1</td>
    </tr>
    <tr>
      <td>20</td>
      <td>F</td>
      <td>1</td>
    </tr>
    <tr>
      <td>25</td>
      <td>M</td>
      <td>2</td>
    </tr>
  </tbody>
</table>

<p><br /></p>
<h3 id="join">JOIN</h3>

<hr />
<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:1" role="doc-endnote">
      <p>If multiple tables are used without any join operations, it will simply do a cross join (or a <a href="https://en.wikipedia.org/wiki/Cartesian_product">cartesian product</a>) to create all possible combinations. <a href="#fnref:1" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:2" role="doc-endnote">
      <p><code class="language-plaintext highlighter-rouge">WHERE age BETWEEN 20 and 30</code> is equal to <code class="language-plaintext highlighter-rouge">WHERE age &gt;= 20 AND age &lt;= 30</code> <a href="#fnref:2" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>]]></content><author><name>jyaquinas</name></author><category term="Database" /><category term="sql" /><category term="oracle" /><category term="database" /><summary type="html"><![CDATA[SELECT]]></summary></entry><entry><title type="html">Versioning with Conventional Commits</title><link href="http://localhost:4000/git/2022/02/09/versioning_with_git.html" rel="alternate" type="text/html" title="Versioning with Conventional Commits" /><published>2022-02-09T22:03:00+09:00</published><updated>2022-02-09T22:03:00+09:00</updated><id>http://localhost:4000/git/2022/02/09/versioning_with_git</id><content type="html" xml:base="http://localhost:4000/git/2022/02/09/versioning_with_git.html"><![CDATA[<ul>
  <li>https://nvie.com/posts/a-successful-git-branching-model/</li>
  <li>https://www.conventionalcommits.org/en/v1.0.0/#specification</li>
  <li>https://semver.org/</li>
  <li>https://keepachangelog.com/en/1.0.0/</li>
  <li>https://datasift.github.io/gitflow/IntroducingGitFlow.html</li>
</ul>]]></content><author><name>jyaquinas</name></author><category term="git" /><category term="git" /><category term="versioning" /><category term="database" /><summary type="html"><![CDATA[https://nvie.com/posts/a-successful-git-branching-model/ https://www.conventionalcommits.org/en/v1.0.0/#specification https://semver.org/ https://keepachangelog.com/en/1.0.0/ https://datasift.github.io/gitflow/IntroducingGitFlow.html]]></summary></entry><entry><title type="html">Trie Data Structure</title><link href="http://localhost:4000/data%20structures/2022/02/07/trie-data-structure.html" rel="alternate" type="text/html" title="Trie Data Structure" /><published>2022-02-07T13:18:00+09:00</published><updated>2022-02-07T13:18:00+09:00</updated><id>http://localhost:4000/data%20structures/2022/02/07/trie-data-structure</id><content type="html" xml:base="http://localhost:4000/data%20structures/2022/02/07/trie-data-structure.html"><![CDATA[<p>I think I first came across the concept of a trie (pronounced <em>try</em>) when I was reading the book <em>Cracking the Coding Interview</em>. But I never really gave it much thought. Plus, I never came across a problem on <a href="https://www.leetcode.com">Leet Code</a> where I had to use one (at least for me). But I recently came across a problem where using a trie was the only way to efficiently solve the problem.</p>

<p>Let’s briefly go over the basics.</p>

<p>A trie is a special type of tree that can compactly store strings. This is especially true if the words are very similar, i.e. having overlapping parts, like prefixes.</p>

<p>Each node contains a boolean flag, <code class="language-plaintext highlighter-rouge">isEndOfWord</code>, that can be used to indicate the end of a word. Now, this can vary depending on the implementation. If you’d like to associate a value for each word, you’d simply replace the bool variable with something like an int to store the value.</p>

<p>The node’s children consist of all the possible characters of a word. So if we limit it to lowercase alphabets, a-z, it can have up to 26 children (stored in an array).</p>

<p><strong>Pros</strong></p>
<ul>
  <li>space-efficient if storing similar words</li>
  <li>efficient for looking up prefixes</li>
  <li>relatively fast insert and lookup</li>
</ul>

<p><strong>Cons</strong></p>
<ul>
  <li>space inefficient for non-overlapping words</li>
  <li>slower than hash table (depends on how the hash value is calculated)</li>
</ul>

<p>Here is the implementation in python.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">TrieNode</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">children</span> <span class="o">=</span> <span class="p">[</span><span class="bp">None</span><span class="p">]</span> <span class="o">*</span> <span class="mi">26</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">isEndOfWord</span> <span class="o">=</span> <span class="bp">False</span>

<span class="k">class</span> <span class="nc">Trie</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">root</span> <span class="o">=</span> <span class="n">TrieNode</span><span class="p">()</span>

    <span class="k">def</span> <span class="nf">insert</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">word</span><span class="p">):</span>
        <span class="n">node</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">root</span>
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">word</span><span class="p">)):</span>
            <span class="n">index</span> <span class="o">=</span> <span class="nb">ord</span><span class="p">(</span><span class="n">word</span><span class="p">[</span><span class="n">i</span><span class="p">])</span> <span class="o">-</span> <span class="nb">ord</span><span class="p">(</span><span class="s">'a'</span><span class="p">)</span>
            <span class="k">if</span> <span class="ow">not</span> <span class="n">node</span><span class="p">.</span><span class="n">children</span><span class="p">[</span><span class="n">index</span><span class="p">]:</span>
                <span class="n">node</span><span class="p">.</span><span class="n">children</span><span class="p">[</span><span class="n">index</span><span class="p">]</span> <span class="o">=</span> <span class="n">TrieNode</span><span class="p">()</span>
            <span class="n">node</span> <span class="o">=</span> <span class="n">node</span><span class="p">.</span><span class="n">children</span><span class="p">[</span><span class="n">index</span><span class="p">]</span>
        <span class="n">node</span><span class="p">.</span><span class="n">isEndOfWord</span> <span class="o">=</span> <span class="bp">True</span>

    <span class="k">def</span> <span class="nf">search</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">word</span><span class="p">):</span>
        <span class="n">node</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">root</span>
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">word</span><span class="p">)):</span>
            <span class="n">index</span> <span class="o">=</span> <span class="nb">ord</span><span class="p">(</span><span class="n">word</span><span class="p">[</span><span class="n">i</span><span class="p">])</span> <span class="o">-</span> <span class="nb">ord</span><span class="p">(</span><span class="s">'a'</span><span class="p">)</span>
            <span class="k">if</span> <span class="ow">not</span> <span class="n">node</span><span class="p">.</span><span class="n">children</span><span class="p">[</span><span class="n">index</span><span class="p">]:</span>
                <span class="k">return</span> <span class="bp">False</span>
            <span class="n">node</span> <span class="o">=</span> <span class="n">node</span><span class="p">.</span><span class="n">children</span><span class="p">[</span><span class="n">index</span><span class="p">]</span>
        <span class="k">return</span> <span class="n">node</span><span class="p">.</span><span class="n">isEndOfWord</span>

    <span class="k">def</span> <span class="nf">delete</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">word</span><span class="p">):</span>
        <span class="n">node</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">root</span>
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">word</span><span class="p">)):</span>
            <span class="n">index</span> <span class="o">=</span> <span class="nb">ord</span><span class="p">(</span><span class="n">word</span><span class="p">[</span><span class="n">i</span><span class="p">])</span> <span class="o">-</span> <span class="nb">ord</span><span class="p">(</span><span class="s">'a'</span><span class="p">)</span>
            <span class="k">if</span> <span class="ow">not</span> <span class="n">node</span><span class="p">.</span><span class="n">children</span><span class="p">[</span><span class="n">index</span><span class="p">]:</span>
                <span class="k">return</span> <span class="bp">False</span>
            <span class="n">node</span> <span class="o">=</span> <span class="n">node</span><span class="p">.</span><span class="n">children</span><span class="p">[</span><span class="n">index</span><span class="p">]</span>
        <span class="n">node</span><span class="p">.</span><span class="n">isEndOfWord</span> <span class="o">=</span> <span class="bp">False</span>
        <span class="k">return</span> <span class="bp">True</span>

</code></pre></div></div>

<p>Let’s test it.</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">t</span> <span class="o">=</span> <span class="n">Trie</span><span class="p">()</span>
<span class="n">words</span> <span class="o">=</span> <span class="p">[</span><span class="s">'camp'</span><span class="p">,</span> <span class="s">'camper'</span><span class="p">,</span> <span class="s">'cat'</span><span class="p">,</span> <span class="s">'cater'</span><span class="p">]</span>
<span class="k">print</span><span class="p">(</span><span class="s">'Inserting words: '</span><span class="p">,</span> <span class="n">words</span><span class="p">)</span>

<span class="k">for</span> <span class="n">word</span> <span class="ow">in</span> <span class="n">words</span><span class="p">:</span>
    <span class="n">t</span><span class="p">.</span><span class="n">insert</span><span class="p">(</span><span class="n">word</span><span class="p">)</span>

<span class="k">for</span> <span class="n">word</span> <span class="ow">in</span> <span class="n">words</span><span class="p">:</span>
    <span class="k">print</span><span class="p">(</span><span class="n">word</span><span class="p">,</span> <span class="s">'is in trie?'</span><span class="p">,</span> <span class="n">t</span><span class="p">.</span><span class="n">search</span><span class="p">(</span><span class="n">word</span><span class="p">))</span>

<span class="n">deletewords</span> <span class="o">=</span> <span class="p">[</span><span class="s">'car'</span><span class="p">,</span> <span class="s">'camper'</span><span class="p">]</span>
<span class="k">print</span><span class="p">(</span><span class="s">'Delete words: '</span><span class="p">,</span> <span class="n">deletewords</span><span class="p">)</span>

<span class="k">for</span> <span class="n">word</span> <span class="ow">in</span> <span class="n">deletewords</span><span class="p">:</span>
    <span class="k">print</span><span class="p">(</span><span class="n">word</span><span class="p">,</span> <span class="s">'deleted?'</span><span class="p">,</span> <span class="n">t</span><span class="p">.</span><span class="n">delete</span><span class="p">(</span><span class="n">word</span><span class="p">))</span>
<span class="k">for</span> <span class="n">word</span> <span class="ow">in</span> <span class="n">words</span><span class="p">:</span>
    <span class="k">print</span><span class="p">(</span><span class="n">word</span><span class="p">,</span> <span class="s">'is in trie?'</span><span class="p">,</span> <span class="n">t</span><span class="p">.</span><span class="n">search</span><span class="p">(</span><span class="n">word</span><span class="p">))</span>
</code></pre></div></div>

<p>Outputs:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Inserting words:  ['camp', 'camper', 'cat', 'cater']
camp is in trie? True
camper is in trie? True
cat is in trie? True
cater is in trie? True
Delete words:  ['car', 'camper']
car deleted? False
camper deleted? True
camp is in trie? True
camper is in trie? False
cat is in trie? True
cater is in trie? True
</code></pre></div></div>]]></content><author><name>jyaquinas</name></author><category term="Data Structures" /><category term="data structures" /><category term="algorithms" /><category term="trie" /><summary type="html"><![CDATA[I think I first came across the concept of a trie (pronounced try) when I was reading the book Cracking the Coding Interview. But I never really gave it much thought. Plus, I never came across a problem on Leet Code where I had to use one (at least for me). But I recently came across a problem where using a trie was the only way to efficiently solve the problem.]]></summary></entry></feed>